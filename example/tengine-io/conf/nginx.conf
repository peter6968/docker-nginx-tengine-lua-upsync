user root root;
worker_processes auto;

pid /var/run/nginx.pid;
worker_rlimit_nofile 51200;
#error_log /etc/nginx/error_nginx.log crit;

events {
  use epoll;
  worker_connections 51200;
  multi_accept on;
}

thread_pool default threads=16 max_queue=65536;

http {
  lua_package_path "/etc/nginx/lua/modules/lua-resty-http/lib/?.lua;;";
  lua_io_thread_pool default;
  init_worker_by_lua_block {
    if 0 == ngx.worker.id() then
      local delay = 60
      local handler
      handler = function (premature)
          if premature then
            return
          end
          os.execute("curl http://127.0.0.1:8228/server/set")
          ngx.log(ngx.NOTICE, "curl http://127.0.0.1:8228/server/set", "called")
      end

      local ok, err = ngx.timer.every(delay, handler)
      if not ok then
        ngx.log(ngx.ERR, "failed to create the timer: ", err)
        return 
      end
    end  

  }

  server {
    listen 8228;
    location /server/set {

      lua_io_write_buffer_size 4k;
      content_by_lua_block {
        local consul_server = "192.168.56.102:31354"
        local dynamic_server_path = "/etc/nginx/vhosts/dynamic_server"
        local dynamic_server_upstreams_path = "/etc/nginx/vhosts/dynamic_server_upstreams"
        local dynamic_server_name = "test.com"
        local dynamic_server_name_id = string.gsub(dynamic_server_name,"%.","_")
        local dynamic_server_port = "80"
        local dynamic_server_protocol = "http"
        local dynamic_server_proxy_pass_path = "/"
        local ngx_io = require "ngx.io"
        local file, err = ngx_io.open(string.format("%s/%s.conf",dynamic_server_path,dynamic_server_name), "w+")
        local content = [[
          upstream %s {
            server 0.0.0.0;
            upsync %s/v1/kv/upstreams/%s upsync_type=consul;
            upsync_dump_path %s/%s.conf;
          }
          server {
            listen %d;
            server_name %s;
            location %s{
              proxy_pass %s://%s;
            }
          }
        ]]
        local bytes, err = file:write(string.format(
          content,
          dynamic_server_name_id,
          consul_server,
          dynamic_server_name,
          dynamic_server_upstreams_path,
          dynamic_server_name,
          dynamic_server_port,
          dynamic_server_name,
          dynamic_server_proxy_pass_path,
          dynamic_server_protocol,
          dynamic_server_name_id
        ))
        file:close()
        -- os.execute('/usr/sbin/nginx -s reload')
      }
      
    }
  }

  include vhosts/*.conf;
  include vhosts/dynamic_server/*.conf;

}
